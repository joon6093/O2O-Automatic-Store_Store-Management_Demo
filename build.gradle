plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco' // jacoco
	id "org.sonarqube" version "4.4.1.3373" // sonarqube
}

group = 'com.SJY'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot Starter Dependencies
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA
	implementation 'org.springframework.boot:spring-boot-starter-security' // Security
	implementation 'org.springframework.boot:spring-boot-starter-web' // Web

	// Lombok - Simplify Java code
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Database
	runtimeOnly 'com.h2database:h2' // In-memory database
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client' //mariadb
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE' //AWS S3


	// JWT - JSON Web Token
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	// XML and Validation
	implementation 'javax.xml.bind:jaxb-api:2.3.1' // XML Binding
	implementation 'org.springframework.boot:spring-boot-starter-validation' // Validation

	// Test Dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test' // Spring Boot Test
	testImplementation 'org.springframework.security:spring-security-test' // Spring Security Test
	testImplementation 'org.projectlombok:lombok' // Lombok for testing
	testAnnotationProcessor 'org.projectlombok:lombok' // Lombok for testing

	// SpringDoc - OpenAPI 3
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0' // SpringDoc for OpenAPI UI

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta' // QueryDSL for JPA
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta" // QueryDSL Annotation Processor
	annotationProcessor "jakarta.annotation:jakarta.annotation-api" // Jakarta Annotations
	annotationProcessor "jakarta.persistence:jakarta.persistence-api" // Jakarta Persistence API
}

test {
	useJUnitPlatform()
	// finalizedBy jacocoTestReport // Generates report after tests are run
}

// JaCoCo configuration
jacoco {
	toolVersion = "0.8.10"
	reportsDirectory = layout.buildDirectory.dir('jacocoReport')
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		csv.required = false
		html.required = true
	}
	def Qdomains = []
	for (qPattern in '**/QA'..'**/QZ') { // qPattern = '**/QA', '**/QB', ... '*.QZ'
		Qdomains.add(qPattern + '*')
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/dto/**',
					'**/event/**',
					'**/*InitData*',
					'**/*Application*',
					'**/exception/**',
					'**/service/alarm/**',
					'**/aop/**',
					'**/config/**',
					'**/MemberRole*'
			] + Qdomains)
		}))
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	def Qdomains = []
	for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
		Qdomains.add(qPattern + '*')
	}
	violationRules {
		rule {
			enabled = true;
			element = 'CLASS'

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			excludes = [
					'**.dto.**',
					'**.event.**',
					'**.*InitData*',
					'**.*Application*',
					'**.exception.**',
					'**.service.alarm.**',
					'**.aop.**',
					'**.config.**',
					'**.MemberRole*'
			] + Qdomains
		}
	}
}

sonar {
	properties {
		property "sonar.projectKey", "joon6093_O2O_Automatic_Store_System_Demo"
		property "sonar.organization", "joon6093"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.language", "java"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.sources", "src/main/java"
		property "sonar.tests", "src/test/java"
		property 'sonar.coverage.jacoco.xmlReportPaths', 'build/jacocoReport/test/jacocoTestReport.xml'
		property "sonar.java.binaries", "${buildDir}/classes"
		property "sonar.test.inclusions", "**/*Test.java"
		property "sonar.coverage.exclusions", "**/dto/**, **/event/**, **/*InitData*, **/*Application*, **/exception/**, **/service/alarm/**, **/aop/**, **/config/**, **/MemberRole*"
	}
}